//
//  GhibliInteractorTests.swift
//  VIP Arch
//
//  Created by Ferry Adi Wijayanto on 16/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import XCTest
@testable import VIP_Arch

final class GhibliInteractorTests: XCTestCase {
    
    private var presenter: GhibliPresenterSpy!
    private var interactor: GhibliInteractor!
    private var service: MockService!
    
    override func setUp() {
        interactor = GhibliInteractor(factory: self, viewController: nil)
    }
    
    override func tearDown() {
        presenter = nil
        interactor = nil
        service = nil
    }
}


// MARK: - Tests
extension GhibliInteractorTests {
    
    func testExample() {
        // Given
        let expectations = expectation(description: "handle results called")
        service.expectation = expectations

        // When
        interactor.request(.fetchMovies)
        
        waitForExpectations(timeout: 1) { error in
            // Then
            XCTAssertEqual(self.interactor.dataSource.count, 20)
        }

    }
}


// MARK: - GhibliFactorable
extension GhibliInteractorTests: GhibliInteractorFactorable.InteractableFactory {
    
    func makePresenter(viewController: GhibliDisplayLogic?) -> GhibliPresentationLogic {
        presenter = GhibliPresenterSpy()
        return presenter
    }
    
    func makeGhibliService() -> GhibliServiceProtocol {
        service = MockService()
        return service
    }
}


// MARK: - Spy Classes Setup
private extension GhibliInteractorTests {
    
    final class GhibliPresenterSpy: GhibliPresentationLogic {
        
        var items: [GhibliResponse]?
        var passError: String?
        
        func presentResponse(_ response: GhibliModel.Response) {
            switch response {
            case let .movies(movies):
                items = movies
            case let .error(error):
                passError = error
            }
        }
    }
    
    final class MockService: GhibliServiceProtocol {
        var expectation: XCTestExpectation?
        
        func getGhibliData(completion: @escaping (Result<[GhibliResponse], GhibliError>) -> Void) {
            let jsonData = json.data(using: .utf8)!

            do {
                let decoder = JSONDecoder()
                decoder.keyDecodingStrategy = .convertFromSnakeCase

                let movies = try decoder.decode([GhibliResponse].self, from: jsonData)
                completion(.success(movies))
                expectation?.fulfill()
                
            } catch {
                completion(.failure(.FailedToParsedJSON))
                expectation?.fulfill()
            }
        }
    }
}
