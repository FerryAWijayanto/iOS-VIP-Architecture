//
//  GhibliPresenterTests.swift
//  VIP Arch
//
//  Created by Ferry Adi Wijayanto on 16/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import XCTest
@testable import VIP_Arch


final class GhibliPresenterTests: XCTestCase {
    
    private var presenter: GhibliPresenter!
    private var viewController: GhibliViewControllerSpy!
    
    override func setUp() {
        viewController = GhibliViewControllerSpy()
        presenter = GhibliPresenter(viewController: viewController)
    }
    
    override func tearDown() {
        viewController = nil
        presenter = nil
    }
}


// MARK: - Tests
extension GhibliPresenterTests {
    
    func testExample() {
        // Given
        XCTAssertNil(viewController.movieItems)
        XCTAssertNil(viewController.errorMessage)
        XCTAssertFalse(viewController.isDisplayViewModelIsCalled)
        
        let ghibliResponse: [GhibliResponse] = [GhibliResponse(id: "2", title: "b", description: "b desc", releaseDate: "1900", image: "img")]
        let errMessage = "Error Message"
        viewController.movieItems = ghibliResponse
        viewController.errorMessage = errMessage
        
        // When
        presenter.presentResponse(.movies(ghibliResponse))
        presenter.presentResponse(.error(errMessage))
        
        // Then
//        XCTAssertEqual(viewController.movieItems, [GhibliResponse(id: "1", title: "a", description: "a desc", releaseDate: "1001", image: "img")])
        XCTAssertEqual(viewController.movieItems, ghibliResponse)
        XCTAssertEqual(viewController.errorMessage, "Error Message")
        XCTAssert(viewController.isDisplayViewModelIsCalled, "Should display movies when the view is called")
    }
}



// MARK: - Spy Classes Setup
private extension GhibliPresenterTests {
    
    final class GhibliViewControllerSpy: UIViewController, GhibliDisplayLogic {
        var movieItems: [GhibliResponse]?
        var errorMessage: String?
        var isDisplayViewModelIsCalled = false
        
        func displayViewModel(_ viewModel: GhibliModel.ViewModel) {
            isDisplayViewModelIsCalled = true
            switch viewModel {
            case .movies(let movies):
                movieItems = movies
            case .error(let error):
                errorMessage = error
            }
        }
    }
}
