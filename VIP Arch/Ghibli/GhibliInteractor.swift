//
//  GhibliInteractor.swift
//  VIP Arch
//
//  Created by Ferry Adi Wijayanto on 16/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

typealias GhibliInteractable = GhibliBusinessLogic & GhibliDataStore

protocol GhibliBusinessLogic {
    
    func request(_ request: GhibliModel.Request)
}

protocol GhibliDataStore {
    var dataSource: [GhibliResponse] { get }
}

final class GhibliInteractor: GhibliDataStore {
    
    var dataSource: [GhibliResponse] = .init()
    
    private var factory: GhibliInteractorFactorable.InteractableFactory
    private var presenter: GhibliPresentationLogic
    let service: GhibliServiceProtocol
    
    init(factory: GhibliInteractorFactorable.InteractableFactory, viewController: GhibliDisplayLogic?) {
        self.factory = factory
        self.presenter = factory.makePresenter(viewController: viewController)
        self.service = factory.makeGhibliService()
    }
}


// MARK: - GhibliBusinessLogic
extension GhibliInteractor: GhibliBusinessLogic {
    
    func request(_ request: GhibliModel.Request) {
        DispatchQueue.global(qos: .userInitiated).async {
            switch request {
            case .fetchMovies:
                self.fetchMovies()
            }
        }
    }
}


// MARK: - Private Zone
private extension GhibliInteractor {
    
    func fetchMovies() {
        service.getGhibliData { results in
            switch results {
            case .success(let movies):
                self.dataSource = movies
                self.presenter.presentResponse(.movies(movies))
            case .failure(let error):
                self.presenter.presentResponse(.error(error.localizedDescription))
            }
        }
    }
}
