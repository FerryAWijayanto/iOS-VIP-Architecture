//
//  GhibliFactorable.swift
//  VIP Arch
//
//  Created by Ferry Adi Wijayanto on 16/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol GhibliFactorable: GhibliInteractorFactorable, GhibliPresenterFactorable, GhibliRouterFactorable, GhibliServicesFactorable { }

protocol GhibliInteractorFactorable {
    typealias InteractableFactory = GhibliPresenterFactorable & GhibliServicesFactorable
    
    func makeInteractor(factory: InteractableFactory, viewController: GhibliDisplayLogic?) -> GhibliInteractable
}

protocol GhibliPresenterFactorable {
    func makePresenter(viewController: GhibliDisplayLogic?) -> GhibliPresentationLogic
}

protocol GhibliRouterFactorable {
    func makeRouter(viewController: UIViewController?) -> GhibliRouting
}

extension GhibliFactorable {
    
}


// MARK: - Service Factorable
protocol GhibliServicesFactorable {
    
    func makeGhibliService() -> GhibliServiceProtocol
}

extension GhibliServicesFactorable {
    
//    func makeGhibliService() -> GhibliServiceProtocol {

//    }
}
