//
//  GhibliViewController.swift
//  VIP Arch
//
//  Created by Ferry Adi Wijayanto on 16/08/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol GhibliDisplayLogic where Self: UIViewController {
    
    func displayViewModel(_ viewModel: GhibliModel.ViewModel)
}

final class GhibliViewController: UIViewController {
    
    typealias GhibliFactory = GhibliInteractorFactorable & GhibliRouterFactorable & GhibliInteractorFactorable.InteractableFactory
    
    private var interactor: GhibliInteractable!
    private var router: GhibliRouting!
    
    private var collectionView: UICollectionView!
    private var dataSource: [GhibliResponse] = []
    
    required init(factory: GhibliFactory) {
        
        super.init(nibName: nil, bundle: nil)
        
        let interactorFactory = factory
        interactor = factory.makeInteractor(factory: interactorFactory, viewController: self)
        router = factory.makeRouter(viewController: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .systemBackground
        title = "Studio Ghibli"
        navigationController?.navigationBar.prefersLargeTitles = true
        fetchMovies()
        setupCollectionView()
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented, You shouldn't initialize the ViewController using Storyboards")
    }
}

// MARK: - GhibliDisplayLogic
extension GhibliViewController: GhibliDisplayLogic {
    
    func displayViewModel(_ viewModel: GhibliModel.ViewModel) {
        DispatchQueue.main.async {
            switch viewModel {
            case .movies(let movies):
                self.dataSource = movies
                DispatchQueue.main.async {
                    self.collectionView.reloadData()
                }
            case .error(let error):
                print(error)
            }
        }
        
    }
}


// MARK: - Private Zone
private extension GhibliViewController {
    
    func fetchMovies() {
        interactor.request(.fetchMovies)
    }
    
    func setupCollectionView() {
        collectionView = UICollectionView(frame: .zero, collectionViewLayout: UIHelpers.createCollectionViewLayout(in: view))
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(GhibliCell.self, forCellWithReuseIdentifier: GhibliCell.reuseId)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(collectionView)
        NSLayoutConstraint.activate([
            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }
}

extension GhibliViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return dataSource.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: GhibliCell.reuseId, for: indexPath) as! GhibliCell
        
        let movie = dataSource[indexPath.row]
        
        cell.setup(dataSource: movie)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let movie = dataSource[indexPath.row]
        
        router.routeTo(.gotoDetailScreen(withMovie: movie))
    }
}
